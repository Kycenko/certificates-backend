# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthModel {
  accessToken: String!
  refreshToken: String!
  user: UserModel!
}

input CertificateInput {
  finishDate: DateTime!
  healthGroupId: String!
  physicalEducationId: String!
  startDate: DateTime!
  studentId: String!
}

type CertificateModel {
  createdAt: DateTime!
  finishDate: DateTime!
  healthGroup: HealthGroupModel!
  healthGroupId: String!
  id: String!
  physicalEducation: PhysicalEducationModel!
  physicalEducationId: String!
  startDate: DateTime!
  student: StudentModel!
  studentId: String!
  updatedAt: DateTime!
}

input CertificateParamsInput {
  courseNumber: Float
  departmentTitle: String
  finishDate: DateTime
  groupTitle: String
  limit: Float! = 10
  orderBy: String! = "asc"
  page: Float! = 1
  startDate: DateTime
  studentLastName: String
}

type CountStatisticsModel {
  courses: Float!
  curators: Float!
  departments: Float!
  groups: Float!
  students: Float!
}

input CourseInput {
  departmentId: String!
  number: String!
}

type CourseModel {
  createdAt: DateTime!
  department: DepartmentModel!
  departmentId: String!
  groups: [GroupModel!]
  id: String!
  number: String!
  updatedAt: DateTime!
}

input CourseParamsInput {
  departmentTitle: String
  number: String
  orderBy: String! = "asc"
}

type CuratorModel {
  displayedName: String!
  group: GroupModel!
  groupId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DepartmentInput {
  title: String!
}

type DepartmentModel {
  courses: [CourseModel!]
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input DepartmentParamsInput {
  orderBy: String! = "asc"
  title: String
}

input GroupInput {
  courseId: String
  title: String!
}

type GroupModel {
  course: CourseModel
  courseId: String
  createdAt: DateTime!
  curator: CuratorModel
  id: String!
  students: [StudentModel!]
  title: String!
  updatedAt: DateTime!
}

input GroupParamsInput {
  courseNumber: Float
  departmentTitle: String
  orderBy: String! = "asc"
  title: String
}

input HealthGroupInput {
  title: String!
}

type HealthGroupModel {
  certificates: [CertificateModel!]
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input HealthGroupParamsInput {
  orderBy: String! = "asc"
  title: String
}

input LoginInput {
  login: String!
  password: String!
}

type Mutation {
  createCertificate(data: CertificateInput!): CertificateModel!
  createCourse(data: CourseInput!): CourseModel!
  createDepartment(data: DepartmentInput!): DepartmentModel!
  createGroup(data: GroupInput!): GroupModel!
  createHealthGroup(data: HealthGroupInput!): HealthGroupModel!
  createPhysicalEducation(data: PhysicalEducationInput!): PhysicalEducationModel!
  createStudent(data: StudentInput!): StudentModel!
  getNewTokens(refreshToken: String!, userId: String!): AuthModel!
  login(data: LoginInput!): AuthModel!
  logout: Boolean!
  registerAdmin(data: RegisterAdminInput!): AuthModel!
  registerCurator(data: RegisterCuratorInput!): AuthModel!
  removeAllCertificates: Boolean!
  removeAllCourses: Boolean!
  removeAllCurators: Boolean!
  removeAllDepartments: Boolean!
  removeAllGroups: Boolean!
  removeAllHealthGroup: HealthGroupModel!
  removeAllPhysicalEducations: Boolean!
  removeAllStudents: Boolean!
  removeCertificate(id: String!): Boolean!
  removeCourse(id: String!): Boolean!
  removeCurator(id: String!): Boolean!
  removeDepartment(id: String!): Boolean!
  removeGroup(id: String!): Boolean!
  removeHealthGroup(id: String!): Boolean!
  removeManyCertificates(ids: [String!]!): Boolean!
  removeManyCourses(ids: [String!]!): Boolean!
  removeManyCurators(ids: [String!]!): Boolean!
  removeManyDepartments(ids: [String!]!): Boolean!
  removeManyGroups(ids: [String!]!): Boolean!
  removeManyHealthGroups(ids: [String!]!): Boolean!
  removeManyPhysicalEducations(ids: [String!]!): Boolean!
  removeManyStudents(ids: [String!]!): Boolean!
  removePhysicalEducation(id: String!): Boolean!
  removeStudent(id: String!): Boolean!
  updateAdmin(id: String!, updateDto: UpdateAdminInput!): UserModel!
  updateCertificate(data: UpdateCertificateInput!, id: String!): CertificateModel!
  updateCourse(data: UpdateCourseInput!, id: String!): CourseModel!
  updateCurator(id: String!, updateDto: UpdateCuratorInput!): UserModel!
  updateCuratorDisplayedName(displayedName: String!, id: String!): UserModel!
  updateDepartment(data: DepartmentInput!, id: String!): DepartmentModel!
  updateGroup(data: GroupInput!, id: String!): GroupModel!
  updateHealthGroup(data: HealthGroupInput!, id: String!): HealthGroupModel!
  updatePhysicalEducation(data: PhysicalEducationInput!, id: String!): PhysicalEducationModel!
  updateStudent(data: UpdateStudentInput!, id: String!): StudentModel!
}

input PhysicalEducationInput {
  title: String!
}

type PhysicalEducationModel {
  certificates: [CertificateModel!]
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input PhysicalEducationParamsInput {
  orderBy: String! = "asc"
  title: String
}

type Query {
  getAllCertificates(params: CertificateParamsInput): [CertificateModel!]!
  getAllCourses(params: CourseParamsInput): [CourseModel!]!
  getAllCurators: [UserModel!]!
  getAllDepartments(params: DepartmentParamsInput): [DepartmentModel!]!
  getAllGroups(params: GroupParamsInput): [GroupModel!]!
  getAllHealthGroups(params: HealthGroupParamsInput): [HealthGroupModel!]!
  getAllPhysicalEducations(params: PhysicalEducationParamsInput): [PhysicalEducationModel!]!
  getAllStudents(params: StudentParamsInput): [StudentModel!]!
  getAllStudentsByLastName(lastName: String!): [StudentModel!]!
  getCertificateById(id: String!): CertificateModel!
  getCountStatistics: CountStatisticsModel!
  getCourseById(id: String!): CourseModel!
  getDepartmentById(id: String!): DepartmentModel!
  getDepartmentByTitle(title: String!): DepartmentModel!
  getGroupById(id: String!): GroupModel!
  getGroupByTitle(title: String!): GroupModel!
  getHealthGroupById(id: String!): HealthGroupModel!
  getHealthGroupByTitle(title: String!): HealthGroupModel!
  getPhysicalEducationById(id: String!): PhysicalEducationModel!
  getPhysicalEducationByTitle(title: String!): PhysicalEducationModel!
  getProfile: UserModel!
  getStudentById(id: String!): StudentModel!
  getUserByLogin(login: String!): UserModel!
}

input RegisterAdminInput {
  login: String!
  password: String!
  role: String! = "ADMIN"
}

input RegisterCuratorInput {
  displayedName: String!
  groupId: String!
  login: String!
  password: String!
  role: String! = "TEACHER"
}

input StudentInput {
  birthDate: DateTime!
  firstName: String!
  groupId: String
  isExpelled: Boolean! = false
  lastName: String!
  secondName: String
}

type StudentModel {
  birthDate: DateTime!
  certificates: [CertificateModel!]
  createdAt: DateTime!
  firstName: String!
  group: GroupModel
  groupId: String
  id: String!
  isExpelled: Boolean!
  lastName: String!
  secondName: String
  updatedAt: DateTime!
}

input StudentParamsInput {
  courseNumber: String
  departmentTitle: String
  groupId: String
  groupTitle: String
  isExpelled: Boolean = false
  lastName: String
  limit: Float! = 10
  orderBy: String! = "asc"
  page: Float! = 1
}

input UpdateAdminInput {
  login: String
  password: String
  role: String! = "ADMIN"
}

input UpdateCertificateInput {
  finishDate: DateTime
  healthGroupId: String
  physicalEducationId: String
  startDate: DateTime
  studentId: String
}

input UpdateCourseInput {
  departmentId: String
  number: String
}

input UpdateCuratorInput {
  displayedName: String
  groupId: String
  login: String
  password: String
  role: String! = "TEACHER"
}

input UpdateStudentInput {
  birthDate: DateTime
  firstName: String
  groupId: String
  isExpelled: Boolean = false
  lastName: String
  secondName: String
}

type UserModel {
  createdAt: DateTime!
  curator: CuratorModel
  id: String!
  login: String!
  role: String!
  updatedAt: DateTime!
}